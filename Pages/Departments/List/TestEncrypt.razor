
@* @page "/inicio" *@
@inject IJSRuntime JS
<PageTitle>Cryptography demo</PageTitle>

<h1>Cryptography demo</h1>

<p>
    This page demonstrates using JS interop to make a call from a .NET Blazor client app
    into the JavaScript runtime for the purposes of computing an HMACSHA256 hash.
</p>

<p>
    Key (base64-encoded):
    <input type="text" name="key" @bind-value="keyAsString" />
</p>

<p>
    Text to be digested:
    <input type="text" name="inputText" @bind-value="inputTextAsString" />
</p>

<p>
    <button class="btn btn-primary" @onclick="GenRandomKey">Generate random key</button>
    <button class="btn btn-primary" @onclick="ComputeDigest">Compute HMACSHA256 digest</button>
</p>

<p>Encryptado: @statusMessage</p>
<p>Descrypt: @statusMessageDecrypt</p>

@code {
    private string keyAsString = "";
    private string inputTextAsString = "";
    private string statusMessage = "";
    private string statusMessageDecrypt = "";

    private void GenRandomKey()
    {
        // Generate a random 256-bit key.
        byte[] randomBytes = new byte[32];
        System.Security.Cryptography.RandomNumberGenerator.Fill(randomBytes);
        keyAsString = Convert.ToBase64String(randomBytes);
    }

    private async Task ComputeDigest()
    {
        try
        {
            // Base64-decode the key.
            keyAsString = "jKJHkqyNWKujRUbcOUUUjQvtLfLEplK1";
            // Get the binary representation of the text to hash (we'll use UTF-8).
            inputTextAsString ??= string.Empty; // ensure non-null
            // Now use JS interop to call SubtleCrypto's Promise-based API.
            string digestAsBytes = await JS.InvokeAsync<string>("encryptData", keyAsString, inputTextAsString);
            statusMessage = digestAsBytes;


            string digestAsBytes2 = await JS.InvokeAsync<string>("decryptData", keyAsString, digestAsBytes);
            statusMessageDecrypt = digestAsBytes2;
        }
        catch (Exception ex)
        {
            statusMessage = $"ERROR: {ex}";
        }
    }
}